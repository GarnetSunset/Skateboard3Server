using FluentAssertions;
using Microsoft.Extensions.Options;
using Skateboard3Server.Blaze.Tickets;
using Skateboard3Server.Common;
using Skateboard3Server.Common.Config;
using Xunit;

namespace Skateboard3Server.Blaze.Tests.Tickets;

public class Ps3TicketValidateFacts
{
    [Fact]
    public void ValidateBody_ValidBody()
    {
        var body = new TicketBody
        {
            IssuedDate = TimeUtil.GetUnixTimestampMilliseconds(),
            ExpireDate = TimeUtil.GetUnixTimestampMilliseconds() + 10000,
            ServiceId = new byte[] //UP0006-BLUS30464_00
            {
                0x55, 0x50, 0x30, 0x30, 0x30, 0x36, 0x2D, 0x42, 0x4C, 0x55, 0x53, 0x33, 0x30, 0x34, 0x36, 0x34, 0x5F,
                0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00
            }
        };

        var config = new FlagsConfig
        {
            EnableTicketValidation = true
        };

        //Act
        var validator = new Ps3TicketValidator(Options.Create(config));
        var result = validator.ValidateBody(body);

        //Assert
        result.Should().BeTrue();
    }


    [Fact]
    public void ValidateBody_Not_Valid_Before_IssueDate()
    {
        var body = new TicketBody
        {
            IssuedDate = TimeUtil.GetUnixTimestampMilliseconds() + 10000,
            ExpireDate = TimeUtil.GetUnixTimestampMilliseconds() + 20000
        };

        var config = new FlagsConfig
        {
            EnableTicketValidation = true
        };

        //Act
        var validator = new Ps3TicketValidator(Options.Create(config));
        var result = validator.ValidateBody(body);

        //Assert
        result.Should().BeFalse();
    }

    [Fact]
    public void ValidateBody_Not_Valid_After_ExpireDate()
    {
        var body = new TicketBody
        {
            IssuedDate = TimeUtil.GetUnixTimestampMilliseconds() - 20000,
            ExpireDate = TimeUtil.GetUnixTimestampMilliseconds() - 10000
        };

        var config = new FlagsConfig
        {
            EnableTicketValidation = true
        };

        //Act
        var validator = new Ps3TicketValidator(Options.Create(config));
        var result = validator.ValidateBody(body);

        //Assert
        result.Should().BeFalse();
    }


    [Fact]
    public void ValidateSignature_RPCN()
    {
        var ticket = new Ps3Ticket
        {
            RawBody = new byte[]
            {
                0x30, 0x00, 0x00, 0xA4, 0x00, 0x08, 0x00, 0x14, 0x35, 0x33, 0x33, 0x30, 0x35, 0x31, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x04, 0x33, 0x33,
                0x33, 0x33, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x01, 0x85, 0xF1, 0x39, 0x55, 0x30, 0x00, 0x07, 0x00,
                0x08, 0x00, 0x00, 0x01, 0x85, 0xF1, 0x47, 0x10, 0xD0, 0x00, 0x02, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x45, 0x06, 0x00, 0x04, 0x00, 0x20, 0x77, 0x61, 0x74, 0x65, 0x72, 0x62, 0x6F, 0x74, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x04, 0x62, 0x72, 0x00, 0x00, 0x00, 0x04, 0x00,
                0x04, 0x75, 0x6E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x55, 0x50, 0x30, 0x30, 0x30, 0x36, 0x2D, 0x42,
                0x4C, 0x55, 0x53, 0x33, 0x30, 0x34, 0x36, 0x34, 0x5F, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            },
            Footer = new TicketFooter
            {
                KeyId = new byte[] { 0x52, 0x50, 0x43, 0x4E },
                Signature = new byte[]
                {
                    0x30, 0x3D, 0x02, 0x1C, 0x5F, 0x38, 0x4F, 0xFA, 0xB9, 0x50, 0xCA, 0x06, 0xCF, 0xED, 0x74, 0xDE,
                    0xD7, 0x45, 0x35, 0x06, 0x77, 0xFE, 0x61, 0x60, 0x38, 0xE7, 0xE2, 0xC7, 0x0A, 0xF3, 0x2F, 0xDA,
                    0x02, 0x1D, 0x00, 0xD2, 0x32, 0xD9, 0x20, 0xBB, 0x09, 0xD1, 0x4D, 0xCD, 0x40, 0xFE, 0xE1, 0x4E,
                    0xBC, 0xF8, 0xD9, 0x26, 0xE8, 0x3D, 0xE4, 0x6A, 0xAA, 0xED, 0x2A, 0xEE, 0xB7, 0x88, 0x6F
                }
            }
        };

        var config = new FlagsConfig
        {
            EnableTicketValidation = true
        };

        //Act
        var validator = new Ps3TicketValidator(Options.Create(config));
        var result = validator.ValidateSignature(ticket);

        //Assert
        result.Should().BeTrue();
    }

    [Fact]
    public void ValidateSignature_PSN()
    {
        var ticket = new Ps3Ticket
        {
            RawTicket = new byte[]
            {
                0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x30, 0x00, 0x00, 0xAC, 0x00, 0x08, 0x00, 0x14, 0xB9,
                0xB5, 0x60, 0x63, 0x87, 0x4D, 0x16, 0x31, 0xCD, 0x7C, 0x7C, 0x19, 0x9B, 0x40, 0xC5, 0xF3, 0x3C, 0xA6,
                0xF1, 0xCD, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x01,
                0x7A, 0x49, 0x64, 0x61, 0xA1, 0x00, 0x07, 0x00, 0x08, 0x00, 0x00, 0x01, 0x7A, 0x49, 0x6D, 0x88, 0x68,
                0x00, 0x02, 0x00, 0x08, 0x24, 0x3A, 0x06, 0x20, 0xC0, 0x3E, 0x77, 0xE8, 0x00, 0x04, 0x00, 0x20, 0x77,
                0x61, 0x74, 0x65, 0x72, 0x62, 0x6F, 0x74, 0x33, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
                0x04, 0x75, 0x73, 0x00, 0x01, 0x00, 0x04, 0x00, 0x04, 0x62, 0x33, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18,
                0x55, 0x50, 0x30, 0x30, 0x30, 0x36, 0x2D, 0x42, 0x4C, 0x55, 0x53, 0x33, 0x30, 0x34, 0x36, 0x34, 0x5F,
                0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x11, 0x00, 0x04, 0x07, 0xBE, 0x08, 0x1D, 0x00, 0x01,
                0x00, 0x04, 0x26, 0x00, 0x02, 0x00, 0x30, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00,
                0x44, 0x00, 0x08, 0x00, 0x04, 0x38, 0x2D, 0xE5, 0x8D, 0x00, 0x08, 0x00, 0x38
            },
            Footer = new TicketFooter
            {
                KeyId = new byte[] { 0x38, 0x2D, 0xE5, 0x8D },
                Signature = new byte[]
                {
                    0x30, 0x35, 0x02, 0x19, 0x00, 0x9F, 0x7C, 0xE2, 0x75, 0x34, 0x76, 0xB4, 0x26, 0xDA, 0x77, 0xC1,
                    0x33, 0x8E, 0xA8, 0x7A, 0xC3, 0x04, 0x22, 0x70, 0x15, 0x7C, 0x3C, 0x5A, 0x33, 0x02, 0x18, 0x38,
                    0x92, 0x8A, 0x31, 0x26, 0x1C, 0x28, 0x32, 0x97, 0xBD, 0x5B, 0xA4, 0x75, 0xF7, 0xC8, 0x3F, 0xF1,
                    0xF8, 0xE5, 0x44, 0x61, 0x5D, 0x13, 0xD3, 0x00
                }
            }
        };

        var config = new FlagsConfig
        {
            EnableTicketValidation = true
        };

        //Act
        var validator = new Ps3TicketValidator(Options.Create(config));
        var result = validator.ValidateSignature(ticket);

        //Assert
        result.Should().BeTrue();
    }
}